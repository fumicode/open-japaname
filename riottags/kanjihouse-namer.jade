kanjihouse-namer
  form(action="#{action_url}" method="post")

    table.kanjihouseNamer
      tr
        th.kanjihouseNamer__headCell オリジナル
        td
          input(type="text" name="original_name" ref="original_name" value="{name.original}" onchange="{changeOriginal}" style="display:inline")
          
          input(type="button" onclick="{estimateKana}" value="読みを推測")

      tr
        th.kanjihouseNamer__headCell カナ
        td
          input(type="text" name="name_kana" ref="name_kana" style="display:inline" onchange="{kanaChanged}")
          input(type="button" onclick="{kanaChangedForce}" value="下に挿入")
          | データベースにはされません。空欄でも可。

      tr
        td(colspan="2")
          h5 当て字
          table.kanjihouseNamer__table
            tr
              th カナ
              th 漢字
              th 意味
                p(style="font-weight:normal;font-size:small") 辞書にある場合は補完されます。
              th コメント
              th 削除ボタン

            tr(data-is="kanjihouse-ateji-row" atemoji="{atemoji}" index="{index}" 
              each="{atemoji,index in name.atejis}" 
              ondelete="{parent.deleteRow}" onchange="{parent.changeAtemoji}")


          a.button(onclick="{addRow}") 文字を追加

      tr
        td(colspan="2")
          input(type="hidden" name="names" value="{names_str}")
          input(type="button" onclick="submit()" value="Japanameを保存")

  script.
    
    var this_tag = this;
    this.japaname = opts.japaname || null;

    function Atemoji(kana,kanji,meanings,comment){
      this.kana = kana;
      this.kanji = kanji;
      this.meanings = meanings;
      this.comment = comment;
    }

    Atemoji.prototype.isEmpty =function(){
      return !this.kana && !this.kanji;
    }

    function Name(original, kana, atejis){
      this.original = original;
      this.kana = kana;
      this.atejis = atejis;
    }

    Name.prototype.isEmpty = function(){
      var allEmpty = _(this.atejis).reduce(function(empty, ateji){
        return empty && ateji.isEmpty()
      },true);

      return allEmpty
    }


    if(this.japaname){
      let name = this.japaname.names[0];

      console.log("name");
      console.log(name);

      let atemojis = _(name.ateji.atemojis).map(atemoji=>{
        return new Atemoji(atemoji.kana, atemoji.kanji, [""], atemoji.comment)
      });

      console.log("atemojis");
      console.log(atemojis);

      let kana = _(name.atemojis).reduce((str, atemoji)=>{
        return str + atemoji.kana
      },"");
      console.log("kana");
      console.log(kana);

      this.name = new Name(name.original, "",atemojis);
    }
    else{ //japaname が与えられてない場合は、1からつくる
      this.name = new Name("","", [ //original, kana, atejis
        new Atemoji("", "", [""], ""),
        new Atemoji("", "", [""], ""),
        new Atemoji("", "", [""], ""),
      ]);
    }


    this.names_str = JSON.stringify([ this.name ]);


    this.on("update",function(){
      this_tag.names_str = JSON.stringify([ this.name ]);
    });

    changeOriginal(e){
      var original_name = e.target.value;

      this_tag.name.original = original_name;

    }

    changeAtemoji(e){
      var atemoji = e.item.atemoji;
      var index = e.item.index;

      if(e.target.name == "meanings"){
        this_tag.name.atejis[index][e.target.name] 
          = e.target.value.split("\n");
      }
      else{
        this_tag.name.atejis[index][e.target.name] 
          = e.target.value;
      }

      this_tag.update();
    }

    estimateKana(e){

      var original_name_input = this_tag.refs.original_name;
      var original_name = original_name_input.value;

      //ajaxで取得

      request
        .get("/api/core/names/kana_translation/" + original_name )
        .end(function(err, res){

          var res_json = JSON.parse(res.text);
          console.log(res_json);

          //1番目を次のフィールドに入れる
          this_tag.refs.name_kana.value = res_json.katakana;

          this_tag.kanaChanged(e);
          this_tag.update();
        });

    }

    kanaChanged(e){
      var kana_string = this.refs.name_kana.value;

      if(!this.name.isEmpty()){
        return ; //do nothing
      }

      var new_atejis= [];
      _(kana_string).each(function(kana){
        new_atejis.push(new Atemoji(kana, "", [""], ""));
      });

      this_tag.name.atejis = new_atejis;
    }

    kanaChangedForce(e){
      var kana_string = this.refs.name_kana.value;

      console.log(kana_string);

      var new_atejis = _(kana_string).map(function(kana){
        return new Atemoji(kana, "", [""], "");
      });

      this_tag.name.atejis = new_atejis;
    }

    addRow(e){
      this_tag.name.atejis.push(new Atemoji("","",[""],""))
    }

    deleteRow(e){

      console.log("deleting");

      console.log(e.item)
      this_tag.name.atejis.splice(e.item.index, 1);
      this_tag.update();
    }


kanjihouse-ateji-row
  td 
    input.kanjihouseNamer__kanaBox(name="kana" type="text" value="{atemoji.kana}" onchange="{changeAtemoji}")
  td 
    input.kanjihouseNamer__kanjiBox(name="kanji" type="text" value="{atemoji.kanji}" onchange="{changeAtemoji}")
  td 
    textarea.kanjihouseNamer__meaningsBox(name="meanings" value="{atemoji.meanings.join('\n')}" onchange="{changeAtemoji}") {atemoji.meanings.join('\n')}
  td 
    textarea.kanjihouseNamer__commentBox(name="comment" value="{atemoji.comment}" onchange="{changeAtemoji}") {atemoji.changeAtemoji}
  td
    a.button(onclick="{ondeleteFunc}") 削除

  script.
    this.atemoji = opts.atemoji;
    this.index = opts.index;
    this.ondelete = opts.ondelete;
    this.onchange = opts.onchange;


    ondeleteFunc(e){
      if(this.ondelete && typeof this.ondelete === "function"){
        //デリートボタンが押されたという情報だけでいい
        this.ondelete(e);
      }
    }

    changeAtemoji(e){
      if(this.onchange&& typeof this.onchange === "function"){
        this.onchange(e);
      }
    }

